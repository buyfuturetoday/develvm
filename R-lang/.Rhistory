install.packages("runit", lib="./R-packages/", repos='http://cran.us.r-project.org')
q()
install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
q()
if(require("RUnit")){
    print("RUnit is loaded correctly")
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
require("RUnit")
require(RUnit)
install.packages("RUnit", repos='http://cran.us.r-project.org')
require("RUnit")
install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
q()
install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
require("RUnit", lib="./R-packages/")
sessionInfo()
version
if(require("RUnit", lib="./R-packages/")){
    print("RUnit is loaded correctly")
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
ls
q()
pwd
cwd
?
help
packageVersion("RUnit")
if(require("RUnit", lib="./R-packages/")){
    print("RUnit is loaded correctly")
    print(packageVersion("RUnit"))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
print("Hej ", "p√• dig")
if(require("RUnit", lib="./R-packages/")){
    print(past("RUnit is loaded correctly. Version:"), packageVersion("RUnit"))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:"), packageVersion("RUnit"))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
packageVersion("RUnit")
a<-3
a
as.string(a)
b<-"4"
as.numeric(b)
toString
toString(packageVersion("RUnit"))
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:"), toString(packageVersion("RUnit")))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
paste("RUnit is loaded correctly. Version:"), toString(packageVersion("RUnit"))
paste("AB"," CD")
paste("AB","CD")
print(paste("AB","CD"))
paste(toString(packageVersion("RUnit"))
"CD")
paste(toString(packageVersion("RUnit"), "CD")
)
paste(toString(packageVersion("RUnit"), "CD"))
paste("AB", "CD"))
paste("AB", "CD")
paste(toString(packageVersion("RUnit")), "CD")
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:")), toString(packageVersion("RUnit")) 
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")) 
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print("RUnit installed and loaded")
    } else {
        stop("could not install RUnit")
    }
}
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    } else {
        stop("could not install RUnit")
    }
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    } else {
##        stop("could not install RUnit")
    }
}
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
##        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    } else {
        stop("could not install RUnit")
    }
}
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    } else {
        stop("could not install RUnit")
    }
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    } else {
        stop("could not install RUnit")
    }
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    } 
    else {
        stop("could not install RUnit")
    }
}
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
    }
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit")))
)
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit"))))
} else {
    print("trying to install RUnit")
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit"))))
    } else {
        stop("could not install RUnit")
    }
}
dir.create(file.path(".", "tmp"), showWarnings = FALSE)
q()
if(require("RUnit", lib="./R-packages/")){
    print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit"))))
} else {
    print("trying to install RUnit")
    dir.create(file.path(".", "R-packages"), showWarnings = FALSE)
    install.packages("RUnit", lib="./R-packages/", repos='http://cran.us.r-project.org')
    if(require("RUnit", lib="./R-packages/")){
        print(paste("RUnit is loaded correctly. Version:", toString(packageVersion("RUnit"))))
    } else {
        stop("could not install RUnit")
    }
}
## centigrade to Fahrenheit
c2f <- function(c) return(9/5 * c + 32)
## Fahrenheit to centigrade
f2c <- function(f) return(5/9 * f - 32)  ## ups, a bug (brackets missing)
## test functions:
## ---------------------
.setUp <- function() {  ## called before each test case, see also .tearDown()
  print(".setUp")
}
test.c2f <- function() {
  checkEquals(c2f(0), 32)
  checkEquals(c2f(10), 50)
  ## check that an error is created for a bogus argument
  checkException(c2f("xx"))
}
test.f2c <- function() {
  checkEquals(f2c(32), 0)
  checkEquals(f2c(50), 10)
  ## check that an error is created for a bogus argument
  checkException(f2c("xx"))
}
test.errordemo <- function() {
  stop("this is just to show what an error looks like as opposed to a failure")
}
## This is a very trivial demo  of
## the RUnit test case execution system:
## ---------------------------------
## functions to be tested (usually defined in a different
## file from where the test cases are located):
## centigrade to Fahrenheit
c2f <- function(c) return(9/5 * c + 32)
## Fahrenheit to centigrade
f2c <- function(f) return(5/9 * f - 32)  ## ups, a bug (brackets missing)
## test functions:
## ---------------------
.setUp <- function() {  ## called before each test case, see also .tearDown()
  print(".setUp")
}
test.c2f <- function() {
  checkEquals(c2f(0), 32)
  checkEquals(c2f(10), 50)
  ## check that an error is created for a bogus argument
  checkException(c2f("xx"))
}
test.f2c <- function() {
  checkEquals(f2c(32), 0)
  checkEquals(f2c(50), 10)
  ## check that an error is created for a bogus argument
  checkException(f2c("xx"))
}
test.errordemo <- function() {
  stop("this is just to show what an error looks like as opposed to a failure")
}
testsuite.cf <- defineTestSuite("cfConversion", dirs=".")
testResult <- runTestSuite(testsuite.cf)
printTextProtocol(testResult)
printHTMLProtocol(testResult, fileName="someFileName.html")
q()

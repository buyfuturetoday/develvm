// Generated by CoffeeScript 1.6.2
var appPath, balUtil, docpadConfig, fsUtil, getCategoryName, getContributors, getLabelName, getLinkName, getName, getProjectName, humanize, moment, pathUtil, rootPath, sitePath, strUtil, textData, websiteVersion, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fsUtil = require('fs');

pathUtil = require('path');

_ = require('underscore');

moment = require('moment');

strUtil = require('underscore.string');

getContributors = require('getcontributors');

balUtil = require('bal-util');

rootPath = __dirname + '/../..';

appPath = __dirname;

sitePath = rootPath + '/site';

textData = balUtil.requireFresh(appPath + '/templateData/text');

websiteVersion = balUtil.requireFresh(rootPath + '/package.json').version;

getName = function(a, b) {
  var _ref, _ref1;

  if (b === null) {
    return (_ref = textData[b]) != null ? _ref : humanize(b);
  } else {
    return (_ref1 = textData[a][b]) != null ? _ref1 : humanize(b);
  }
};

getProjectName = function(project) {
  return getName('projectNames', project);
};

getCategoryName = function(category) {
  return getName('categoryNames', category);
};

getLinkName = function(link) {
  return getName('linkNames', link);
};

getLabelName = function(label) {
  return getName('labelNames', label);
};

humanize = function(text) {
  if (text == null) {
    text = '';
  }
  return strUtil.humanize(text.replace(/^[\-0-9]+/, '').replace(/\..+/, ''));
};

docpadConfig = {
  rootPath: rootPath,
  outPath: rootPath + '/site/out',
  srcPath: rootPath + '/site/src',
  reloadPaths: [appPath],
  regenerateEvery: 1000 * 60 * 60 * 24,
  templateData: {
    underscore: _,
    strUtil: strUtil,
    moment: moment,
    nodeVersion: process.version,
    nodeMajorMinorVersion: process.version.replace(/^v/, '').split('.').slice(0, 2).join('.'),
    text: textData,
    projects: balUtil.requireFresh(__dirname + '/templateData/projects'),
    promos: balUtil.requireFresh(__dirname + '/templateData/promos'),
    sponsors: balUtil.requireFresh(__dirname + '/templateData/sponsors'),
    testimonials: balUtil.requireFresh(__dirname + '/templateData/testimonials'),
    users: balUtil.requireFresh(__dirname + '/templateData/users'),
    site: {
      url: "http://bevry.me",
      title: "Bevry - Node.js, Backbone.js & JavaScript Consultancy in Sydney, Australia",
      description: "We're a Node.js, Backbone.js and JavaScript consultancy in Sydney Australia with a focus on empowering developers. We've created History.js one of the most popular javascript projects in the world, and DocPad an amazing Node.js Content Management System. Weâ€™re also working on setting up several Startup Hostels all over the world, enabling entreprenuers to travel, collaborate, and live their dream lifestyles cheaper than back home.",
      keywords: "bevry, bevryme, balupton, benjamin lupton, docpad, history.js, node, node.js, javascript, coffeescript, startup hostel, query engine, queryengine, backbone.js, cson",
      services: {
        gauges: '5077ad8cf5a1f5067b000027',
        googleAnalytics: 'UA-35505181-1',
        reinvigorate: '52uel-236r9p108l'
      },
      styles: ['/styles/style.css'].map(function(url) {
        return "" + url + "?websiteVersion=" + websiteVersion;
      }),
      scripts: ["/vendor/jquery.js", "/vendor/log.js", "/vendor/jquery.scrollto.js", "/vendor/modernizr.js", "/vendor/history.js", "/vendor/historyjsit.js", "/scripts/bevry.js", "/scripts/script.js"].map(function(url) {
        return "" + url + "?websiteVersion=" + websiteVersion;
      })
    },
    getName: getName,
    getProjectName: getProjectName,
    getCategoryName: getCategoryName,
    getLinkName: getLinkName,
    getLabelName: getLabelName,
    getPreparedTitle: function() {
      if (this.document.pageTitle !== false && this.document.title) {
        return "" + (this.document.pageTitle || this.document.title) + " | " + this.site.title;
      } else if (this.document.pageTitle === false || (this.document.title != null) === false) {
        return this.site.title;
      }
    },
    getPreparedDescription: function() {
      return this.document.description || this.site.description;
    },
    getPreparedKeywords: function() {
      return this.site.keywords.concat(this.document.keywords || []).join(', ');
    },
    readFile: function(relativePath) {
      var path, result;

      path = this.document.fullDirPath + '/' + relativePath;
      result = fsUtil.readFileSync(path);
      if (result instanceof Error) {
        throw result;
      } else {
        return result.toString();
      }
    },
    codeFile: function(relativePath, language) {
      var contents;

      if (language == null) {
        language = pathUtil.extname(relativePath).substr(1);
      }
      contents = this.readFile(relativePath);
      return "<pre><code class=\"" + language + "\">" + contents + "</code></pre>";
    }
  },
  collections: {
    learn: function(database) {
      var query, sorting;

      query = {
        relativeOutDirPath: {
          $startsWith: 'learn'
        },
        body: {
          $ne: ""
        }
      };
      sorting = [
        {
          projectDirectory: 1,
          categoryDirectory: 1,
          filename: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, category, categoryDirectory, categoryName, layout, name, pageTitle, project, projectDirectory, projectName, standalone, title, urls;

        a = document.attributes;
        layout = 'doc';
        standalone = true;
        projectDirectory = pathUtil.basename(pathUtil.resolve(pathUtil.dirname(a.fullPath) + '/..'));
        project = projectDirectory.replace(/[\-0-9]+/, '');
        projectName = getProjectName(project);
        categoryDirectory = pathUtil.basename(pathUtil.dirname(a.fullPath));
        category = categoryDirectory.replace(/^[\-0-9]+/, '');
        categoryName = getCategoryName(category);
        name = a.basename.replace(/^[\-0-9]+/, '');
        urls = ["/learn/" + project + "-" + name, "/" + project + "/" + name];
        title = "" + (a.title || humanize(name));
        pageTitle = "" + title + " | " + projectName;
        return document.setMetaDefaults({
          title: title,
          pageTitle: pageTitle,
          layout: layout,
          projectDirectory: projectDirectory,
          project: project,
          projectName: projectName,
          categoryDirectory: categoryDirectory,
          category: category,
          categoryName: categoryName,
          url: urls[0],
          standalone: standalone
        }).addUrl(urls);
      });
    },
    pages: function(database) {
      return database.findAllLive({
        relativeOutDirPath: {
          $startsWith: 'pages'
        }
      }, [
        {
          filename: 1
        }
      ]);
    },
    posts: function(database) {
      return database.findAllLive({
        relativeOutDirPath: {
          $startsWith: 'posts'
        }
      }, [
        {
          date: -1
        }
      ]).on('add', function(document) {
        return document.setMetaDefaults({
          ignored: true,
          write: false,
          author: 'balupton'
        });
      });
    }
  },
  plugins: {
    highlightjs: {
      aliases: {
        stylus: 'css'
      }
    },
    repocloner: {
      repos: [
        {
          name: 'DocPad Documentation',
          path: 'src/documents/learn/free/docpad',
          url: 'https://github.com/bevry/docpad-documentation.git'
        }
      ]
    }
  },
  environments: {
    development: {
      templateData: {
        site: {
          services: {
            gauges: false,
            googleAnalytics: false,
            mixpanel: false,
            reinvigorate: false
          }
        }
      }
    }
  },
  events: {
    extendTemplateData: function(opts, next) {
      var contributors, docpad;

      docpad = this.docpad;
      contributors = {};
      opts.templateData.contributors = [];
      getContributors({
        users: ['bevry', 'docpad', 'browserstate'],
        github_client_id: process.env.BEVRY_GITHUB_CLIENT_ID,
        github_client_secret: process.env.BEVRY_GITHUB_CLIENT_ID,
        log: docpad.log,
        next: function(err, contributors) {
          if (err) {
            return next(err);
          }
          opts.templateData.contributors = contributors.filter(function(item) {
            return item.username !== 'balupton';
          });
          return next();
        }
      });
    },
    serverExtend: function(opts) {
      var docpad, express, request, server;

      server = opts.server, express = opts.express;
      docpad = this.docpad;
      request = require('request');
      server.all('/pushover', function(req, res) {
        if (__indexOf.call(docpad.getEnvironments(), 'development') >= 0) {
          return res.send(200);
        }
        return request({
          url: "https://api.pushover.net/1/messages.json",
          method: "POST",
          form: extendr.extend({
            token: process.env.BEVRY_PUSHOVER_TOKEN,
            user: process.env.BEVRY_PUSHOVER_USER_KEY,
            message: req.query
          }, req.query)
        }, function(_req, _res, body) {
          return res.send(body);
        });
      });
      server.get(/^\/(?:learn\/docpad-)(.*)$/, function(req, res) {
        return res.redirect(301, "http://docpad.org/docs/" + (req.params[0] || ''));
      });
      server.get(/^\/(?:g|gh|github)(?:\/(.*))?$/, function(req, res) {
        return res.redirect(301, "https://github.com/bevry/" + (req.params[0] || ''));
      });
      server.get(/^\/(?:t|twitter|tweet)(?:\/(.*))?$/, function(req, res) {
        return res.redirect(301, "https://twitter.com/bevryme");
      });
      server.get(/^\/(?:f|facebook)(?:\/(.*))?$/, function(req, res) {
        return res.redirect(301, "https://www.facebook.com/bevryme");
      });
    }
  }
};

module.exports = docpadConfig;
